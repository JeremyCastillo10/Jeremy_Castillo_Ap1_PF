@page "/R_Estudiantes"
@page "/R_Estudiantes/{EstudianteId:int}"

@inject IToastService toastService

<EditForm Model="estudiante" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div className="Container">
        <div class="card align-items-center" >
            <div class="card">
            <div class="card-header">
                <h3>Registro de Estudiantes</h3>
            </div>

            <div class="card-body" >
                @* Producto Id *@
                <div class="form-row align-items-center">
                    <div class="col">
                        <div class="flex-fill mx-2">
                            @* <label>Producto Id</label> *@
                            <div class="input-group">
                                <span class="input-group-text">ID Estudiante</span>
                                <InputNumber @bind-Value="estudiante.EstudianteId" class="form-control col-4" />
                                <ValidationMessage For="@(() => estudiante.EstudianteId)" />
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary input-group-text"
                                        @onclick="Buscar"><span class="oi oi-magnifying-glass">Buscar</span></button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>


                @*Nombre*@

               <div class="form-group">

                   <label>Nombre</label>

                   <InputText class="form-control" @bind-Value = "estudiante.Nombre"/>

                   <ValidationMessage For="@(() =>estudiante.Nombre)"/>

               </div>

                @*Apellido Paterno*@

               <div class="form-group">

                   <label>Apellidos</label>

                   <InputText class="form-control" @bind-Value = "estudiante.Apellidos"/>

                   <ValidationMessage For="@(() =>estudiante.Apellidos)"/>

               </div>



                @*Direccion*@

               <div class="form-group">

                   <label>Direccion</label>

                   <InputText class="form-control" @bind-Value = "estudiante.Direccion"/>

                   <ValidationMessage For="@(() =>estudiante.Direccion)"/>

               </div>

               @*Sexo*@
               <div class="form-group">

                <label>Sexo</label>

               <InputSelect @bind-Value="estudiante.Sexo" class="form-control">

                <option value="M">Masculino</option>
                <option value="F">Femenino</option>


                </InputSelect>
                <ValidationMessage For="@(() =>estudiante.Sexo)"/>

                </div>

               @*Telefono*@

               <div class="form-group">

                   <label>Telefono</label>

                   <InputText class="form-control" @bind-Value = "estudiante.Telefono"/>

                   <ValidationMessage For="@(() =>estudiante.Telefono)"/>

               </div>

               <div class="form-group">

                   <label>Email</label>

                   <InputText class="form-control" @bind-Value = "estudiante.Email"/>

                   <ValidationMessage For="@(() =>estudiante.Email)"/>

               </div>

                

               

                @* FechaNacimiento *@
                <div Class="form-group" >
                    <div class="form-group col">
                        <label>Fecha de Nacimiento</label>
                        <InputDate class="form-control" @bind-Value="estudiante.FechaNacimiento" />
                        <ValidationMessage For="@(() => estudiante.FechaNacimiento)" />
                    </div>
                </div>

                <div class="form-group">

                   <label>Nacionalidad</label>

                   <InputSelect @bind-Value="estudiante.NacionalidadId" class="form-control">
                   <option value="Venezuela">Venezuela</option>

                    @foreach (var item in lista)
                     {

                       <option value="@item.NacionalidadId">@item.Descripcion</option>
                      }

                  </InputSelect>
                  <ValidationMessage For="@(() =>estudiante.NacionalidadId)"/>

               </div>

                @*Edad*@

               <div class="form-group">

                   <label>Edad</label>

                   <InputNumber readonly class="form-control" @bind-Value = "estudiante.Edad"/>

                   <ValidationMessage For="@(() =>estudiante.Edad)"/>

               </div>


                <div class="card-footer">
                <div class="form-group text-center" display: inline-block>
                    <button type="button" class="btn btn-lg btn-primary oi oi-plus" @onclick="Nuevo">Nuevo</button>
                        <button type="submit" class="btn btn-lg btn-success oi oi-media-stop">Guardar</button>
                        <button type="button" class="btn btn-lg btn-danger oi oi-trash"
                            @onclick="Eliminar">Eliminar</button>
                </div>
                </div>
            </div>
        </div>
    </div>
</div>
</EditForm>


@code {

    [Parameter]
    public int EstudianteId { get; set; }

    public Estudiantes estudiante{ get; set; } = new Estudiantes();
    public List<Nacionalidades> lista = new List<Nacionalidades>();

    [Inject]
    public EstudiantesBLL EstudiantesBLL { get; set; }

    protected override void OnInitialized()
    {
        estudiante.EstudianteId = EstudianteId;
        lista = EstudiantesBLL.GetListNacionalidades(c => true);

        Buscar();
    }
    public void CalcularEdad()
    {
        DateTime Actual = DateTime.Today;
        estudiante.Edad = Actual.Year - estudiante.FechaNacimiento.Year;
    }

    public void Buscar()
    {
        if (this.estudiante.EstudianteId> 0)
        {
            Estudiantes encontrado = EstudiantesBLL.Buscar(this.estudiante.EstudianteId);
            if (encontrado != null)
            {
                this.estudiante= encontrado;
                toastService.ShowSuccess("Estudiante encontrado.");
            }
            else
            {
                toastService.ShowError("No se encontr贸 el Estudiante");
            }
        }
    }

    public void Nuevo()
    {
        estudiante = new Estudiantes();
    }

    public void Guardar()
    {
        if (EstudiantesBLL.Guardar(estudiante))
        {
           CalcularEdad();
            toastService.ShowSuccess("Se guard贸 exitosamente");
        }
        else
            toastService.ShowError("No se pudo guardar.");
    }

    private void Eliminar()
    {
        bool eliminado;
        eliminado = EstudiantesBLL.Eliminar(estudiante.EstudianteId);
        if (eliminado)
        {
            toastService.ShowSuccess("Eliminaci贸n exitosa");
            Nuevo();
        }
        else
        {
            toastService.ShowError("Eliminaci贸n fallida");
        }
    }


}
